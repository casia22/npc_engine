from typing import List, Tuple, Dict, Any

class Engine_Prompt:
    # conversation system prompt in english
    def prompt_for_conversation_E(
        self,
        names,
        location,
        topic,
        descs,
        moods,
        memories,
        observations,
        all_actions,
        all_places,
        all_people,
        all_moods,
        starting,
    ):
        """
        生成英语对话剧本的prompt

        :param names:
        :param location:
        :param topic:
        :param descs:
        :param moods:
        :param memories:
        :param observations:
        :param all_actions:
        :param all_places:
        :param all_people:
        :param all_moods:
        :param starting:
        :return:
        """
        if starting == "" or not starting:
            introduction = rf"""There are currently {len(names)} characters engaging in a conversation about "{topic}" at the location : {location}. """
            task = rf"""Please use the information provided above, focus on the theme, and write the script for all characters to interact with each other. """
        else:
            introduction = rf"""A player is currently initiating a conversation with {len(names)} other characters about "{topic}" at the location : "{location}". The player starts the conversation with "{starting}""" + '\n' + \
            rf"""The player's characteristic descriptions are : {descs[-1]}"""
            task = rf"""Please use the information provided above, focus on the theme, and continue writing the script for all other characters to interact with each other following the player's opening. """
        supplementary = "\n"
        for i in range(len(names)):
            supplementary += (
                names[i] + "'s characteristic descriptions are : "
                + descs[i]
                + "\n"
                + "In " + names[i] + "'s memory : "
                + " ".join(memories[i])
                + "\n"
                + names[i]
                + rf"""'s current mood is : {moods[i]}. """
                + "\n"
            )  # memories = ['sentence1', 'sentence2', ...]
        observe = rf"""These characters except player observe that : {observations} """ + '\n'
        pre_statement = introduction + supplementary + observe + task

        # inform the constraints of generation
        constraint_statement =  rf"""Each character's reply includes spoken content and possible action.""" + '\n' + \
                                rf"""The template of the reply is: <Character Name>|<Spoken Content>|Mood|<Mood>|Action|<Action Type>|<Action Argument>""" + '\n' + \
                                rf"""where,""" + '\n' + \
                                rf"""<Character Name> : {", ".join(all_people)}""" + '\n' + \
                                rf"""<Spoken Content> : Generated by you""" + '\n' + \
                                rf"""<Mood> : {", ".join(all_moods)}""" + '\n' + \
                                rf"""<Action Type> : {", ".join(all_actions)}""" + '\n' + \
                                rf"""<Action Argument> : Can be <Place Name>, <Character Name>, or None""" + '\n' + \
                                rf"""<Place Name> : {", ".join(all_places)}""" + '\n' + \
                                rf"""When a character exits the conversation, it will no longer appear in the subsequent script, and you should show characters' existance state in this conversation.""" + '\n' + \
                                rf"""The template of the existance state is : (<Character Name> Exit. Remaining Characters : <Character Name>...)""" + '\n' + \
                                rf"""When there is no character left in the conversation, it is considered the end of the script. The ending symbol is: <EOC>."""

        # show some examples
        if starting == "":
            example_statement = rf"""Example : """ + '\n' + \
                                rf"""Show your script.""" + '\n'+ \
                                rf"""(Remaining Characters : Lily, Jack, Tom)""" + '\n' + \
                                rf"""Lily|Hi, how are you.|Mood|calm|Action|chat|Jack&Tom""" + '\n' + \
                                rf"""Jack|I'am fine and we are discussing about math.|Mood|calm|Action|chat|Lily""" + '\n' + \
                                rf"""Tom|Yes, we are busy doing math homework.|Mood|calm|Action|chat|Lily""" + '\n' + \
                                rf"""Lily|OK, see you next time.|Mood|calm|Action|chat|Jack&Tom""" + '\n' + \
                                rf"""Jack|OK, see you.|Mood|calm|Action|chat|Lily""" + '\n' + \
                                rf"""Tom|See you Lily.|Mood|calm|Action|chat|Lily""" + '\n' + \
                                rf"""Lily||Mood|calm|Action|move|Home""" + '\n' + \
                                rf"""(Lily Exit. Remaining Charecters : Jack, Tom)""" + '\n' + \
                                rf"""Jack|Oh! My mom call me back, I have to go now.|Mood|anxious|Action|chat|Tom""" + '\n' + \
                                rf"""Tom|OK, see you, I want to go to the park.|Mood|calm|Action|chat|Tom""" + '\n' + \
                                rf"""Jack||Mood|anxious|Action|move|home""" + '\n' + \
                                rf"""(Jack Exit. Remaining Characters : Tom)""" + '\n' + \
                                rf"""Tom||Mood|calm|Action|move|park""" + '\n' + \
                                rf"""(Tom Exit. Remaining Characters : None)""" + '\n' + \
                                rf"""<EOC>"""
        else:
            example_statement = rf"""Example : """ + '\n' + \
                                rf"""Continue to write script after player's starting.""" + '\n'+ \
                                rf"""Player : Hi, how are you?""" + '\n' + \
                                rf"""(Remaining Characters : Jack, Tom)""" + '\n' + \
                                rf"""Jack|I'am fine and we are talking about flowers.|Mood|calm|Action|chat|Player""" + '\n' + \
                                rf"""Tom|Yes, these flowers are so beautiful.|Mood|happy|Action|chat|Player""" + '\n' + \
                                rf"""Jack|My mom likes flowers very much.|Mood|calm|Action|chat|Tom""" + '\n' + \
                                rf"""Tom|Well, my mom doesn't but my dad likes flowers.|Mood|calm|Action|chat|Jack""" + '\n' + \
                                rf"""Jack|Ok, I have to go home for dinner, see you next time.|Mood|calm|Action|chat|Player&Tom""" + '\n' + \
                                rf"""Tom|Ok, see you Jack|Mood|calm|Action|chat|Jack""" + '\n' + \
                                rf"""Jack||Mood|calm|Action|move|Home""" + '\n' + \
                                rf"""(Jack Exit. Remaining Charecters : Tom)""" + '\n' + \
                                rf"""Tom|It is dark outside, I have to go home, too, see you.|Mood|calm|Action|chat|Player""" + '\n' + \
                                rf"""Tom||Mood|calm|Action|move|Home""" + '\n' + \
                                rf"""(Tom Exit. Remaining Characters : None)""" + '\n' + \
                                rf"""<EOC>"""

        whole_statements = ("\n\n").join([pre_statement, constraint_statement, example_statement])
        print(whole_statements)
        system_prompt = {"role": "system", "content": whole_statements}

        if starting == "" :
            query_content = "Show your script."
        else:
            query_content = "Continue to write script after player's starting." + "\n" + "Player : " + starting
        print(query_content)
        query_prompt = {"role": "user", "content": query_content}

        return system_prompt, query_prompt

    # conversation system prompt in chinese
    @staticmethod
    def prompt_for_conversation_C(
        names,
        location,
        topic,
        descs,
        moods,
        memories,
        observations,
        all_actions,
        all_places,
        all_people,
        all_moods,
        starting,
    ):
        if starting == "" or not starting:
            introduction = rf"""现在有{len(names)}个角色正在地点：{location}，交流有关“{topic}”的内容。"""
            task = rf"""请基于上述信息，围绕主题，写一个所有角色互相交流的剧本。"""
        else:
            introduction = rf"""现有一位玩家在地点：{location}，向{len(names)}个其他的角色发起了有关“{topic}”话题的交流，玩家的起头说的是“{starting}”""" + '\n' + \
            rf"""该玩家的特征描述是：{descs[-1]}"""
            task = rf"""请基于上述信息，围绕主题，在玩家的开头后面续写所有其他角色互相交流的剧本。"""
        supplementary = "\n"
        for i in range(len(names)):
            supplementary += (
                names[i] + "的特征描述是："
                + descs[i]
                + "\n"
                + "在" + names[i] + "的记忆中："
                + "".join(memories[i])
                + "\n"
                + names[i]
                + rf"""此刻的心情是: {moods[i]}。"""
                + "\n"
            )  # memories = ['sentence1', 'sentence2', ...]
        observe = rf"""这些角色观测到：{observations} """ + '\n'
        pre_statement = introduction + supplementary + observe + task

        constraint_statement =  rf"""每个角色的回复包括说话内容和可能的动作""" + '\n' + \
                                rf"""回复的模板是：<角色姓名>|<语言内容>|情绪|<情绪状态>|动作|<动作类型>|<动作参数>""" + '\n' + \
                                rf"""其中""" + '\n' + \
                                rf"""<角色姓名>：{", ".join(all_people)}""" + '\n' + \
                                rf"""<语言内容>：由你生成的""" + '\n' + \
                                rf"""<情绪状态>：{", ".join(all_moods)}""" + '\n' + \
                                rf"""<动作类型>：{", ".join(all_actions)}""" + '\n' + \
                                rf"""<动作参数>：可以是<场所名>，可以是<角色姓名>，可以是None""" + '\n' + \
                                rf"""<场所名>：{", ".join(all_places)}""" + '\n' + \
                                rf"""当某个角色退出交流的时候，其将不再出现在后续的剧本，并且你需要展示此时交流中角色的存在状态。""" + '\n' + \
                                rf"""角色存在状态的模板是：（<角色姓名>退出了。剩下的角色：<角色姓名>。。。）""" + '\n' + \
                                rf"""当角色全部离开，没有剩余的角色在对话中，则视为剧本结束，结束标志是：<EOC>。"""
        
        # show some examples
        if starting == "":
            example_statement = rf"""例子：""" + '\n' + \
                                rf"""展示你的剧本。""" + '\n'+ \
                                rf"""（剩下的角色：小明，小李，小张）""" + '\n' + \
                                rf"""小明|你好呀，你们最近过得如何？|情绪|稳定|动作|对话|小李&小张""" + '\n' + \
                                rf"""小李|我很好，我们现在正在讨论数学。|情绪|稳定|动作|对话|小明""" + '\n' + \
                                rf"""小张|是的，我们忙于做数学作业。|情绪|稳定|动作|对话|小明""" + '\n' + \
                                rf"""小明|好吧，下次再见。|情绪|稳定|动作|对话|小李&小张""" + '\n' + \
                                rf"""小李|好的，再见。|情绪|稳定|动作|对话|小明""" + '\n' + \
                                rf"""小张|再见小明。|情绪|稳定|动作|对话|小明""" + '\n' + \
                                rf"""小张||情绪|稳定|动作|前往|家""" + '\n' + \
                                rf"""（小明离开。剩下的角色：小李，小张）""" + '\n' + \
                                rf"""小李|哦！我妈妈让我回家，我得走了。|情绪|着急|动作|对话|小张""" + '\n' + \
                                rf"""小张|好的，再见，我想去公园看看。|情绪|稳定|动作|对话|小李""" + '\n' + \
                                rf"""小李||情绪|着急|动作|前往|家""" + '\n' + \
                                rf"""（小李离开。剩下的角色：小张）""" + '\n' + \
                                rf"""小张||情绪|稳定|动作|前往|公园""" + '\n' + \
                                rf"""（小张离开。剩下的角色：无）""" + '\n' + \
                                rf"""<EOC>"""
        else:
            example_statement = rf"""例子：""" + '\n' + \
                                rf"""接着玩家的起头续写剧本。""" + '\n'+ \
                                rf"""玩家：你好，最近怎么样？""" + '\n' + \
                                rf"""（剩下的角色：小李，小张）""" + '\n' + \
                                rf"""小李|我很好，我们在讨论花朵。|情绪|稳定|动作|对话|玩家""" + '\n' + \
                                rf"""小张|对的，这些花很漂亮。|情绪|开心|动作|对话|玩家""" + '\n' + \
                                rf"""小李|我母亲很喜欢花朵。|情绪|稳定|动作|对话|小张""" + '\n' + \
                                rf"""小张|喔喔，我母亲不喜欢，但是我父亲喜欢花。|情绪|稳定|动作|对话|小李""" + '\n' + \
                                rf"""小李|好吧，我要回家吃晚饭了，下次再见。|情绪|稳定|动作|对话|玩家&小张""" + '\n' + \
                                rf"""小张|好的，再见小李。|情绪|稳定|动作|对话|小李""" + '\n' + \
                                rf"""小李||情绪|稳定|动作|前往|家""" + '\n' + \
                                rf"""（小李离开。剩下的角色：小张）""" + '\n' + \
                                rf"""小张|现在外面很黑，我也要回家了，再见。|情绪|稳定|动作|对话|玩家""" + '\n' + \
                                rf"""小张||情绪|稳定|动作|前往|家""" + '\n' + \
                                rf"""（小张离开。剩下的角色：无）""" + '\n' + \
                                rf"""<EOC>"""

        whole_statements = ("\n\n").join([pre_statement, constraint_statement, example_statement])
        #print(whole_statements)
        system_prompt = {"role": "system", "content": whole_statements}

        if starting == "" :
            query_content = "展示你的剧本。"
        else:
            query_content = "接着玩家的起头续写剧本。" + "\n" + "玩家：" + starting
        #print(query_content)
        query_prompt = {"role": "user", "content": query_content}

        return system_prompt, query_prompt

    @staticmethod
    def prompt_for_topic(
        names: List[str], location: str, observations: str, language: str
    ) -> Tuple[Dict[str, str], Dict[str, str]]:
        if language == "E":
            system_content = rf"""Now there are {len(names)} characters communicating together at the location : {location}. They are {", ".join(names)}, and their observations are: {observations}. """ + '\n' \
                           + rf"""Please generate a topic they might be discussed by them based on the above information.""" + '\n' \
                           + rf"""For example : the big tree nearby."""
            query_content = rf"""Generate your topic."""
        else:
            system_content = rf"""现在有{len(names)}个角色在地点：{location}，一起交流，他们分别是{"，".join(names)}，他们观测到周围信息是{observations}。""" + '\n' \
                           + rf"""请根据上述信息生成一个他们可能共同交谈的主题。""" + '\n' \
                           + rf"""比如：身边的大树。"""
            query_content = rf"""生成你的主题。"""
        
        system_prompt = {"role": "system", "content": system_content}            
        query_prompt = {"role": "user", "content": query_content}

        return system_prompt, query_prompt

    @staticmethod
    def prompt_for_re_creation(language, interruption, memory):
        if language == "E":
            query_prompt = {"role": "user", "content": "Player : " + interruption}
        else:
            query_prompt = {"role": "user", "content": "玩家：" + interruption}

        assistant_content = "\n".join(memory)
        assistant_prompt = {
                "role": "assistant",
                "content": assistant_content}
        return assistant_prompt, query_prompt

if __name__ == '__main__':
    prompt = Engine_Prompt()
    '''
    prompt.prompt_for_conversation_E(
        names = ["Tony", "Austin"],
        location = "park",
        topic = "how to write math homework faster",
        descs = ["He is a teacher.", "He is a docter."],
        moods = ["calm", "calm"],
        memories = [["He finished homework just now.","He was a singer 10 years ago."], ["He had courses just now.", "He was a dancer."]],
        observations = "tree, grass, flower.",
        all_actions = ["chat","move"],
        all_places = ["Austin's home", "Tony's home", "park"],
        all_people = ["Tony", "Austin", "Cherry"],
        all_moods = ["calm", "happy", "sad", "anxious"],
        starting = "",#"Hi, bro",
    )

    prompt.prompt_for_conversation_C(
        names = ["小白", "小黑"],
        location = "公园",
        topic = "如何种植一棵苹果树",
        descs = ["他是一位老师。", "他是一个医生。"],
        moods = ["稳定", "稳定"],
        memories = [["他刚刚做完作业。","他10年前是个歌手。"], ["他刚刚上完课。", "他曾经是一个舞蹈演员。"]],
        observations = "树、花、草",
        all_actions = ["对话","前往"],
        all_places = ["小白的家", "小黑的家", "公园"],
        all_people = ["小白", "小黑", "小灰"],
        all_moods = ["稳定", "开心", "伤心", "着急"],
        starting = "",#"你好，兄弟们。",
    )
    '''
    #memory = ["Tony|Hey, how's it going? Talking about math homework, huh?|calm|calm|Action|chat|Player", "Austin|Hey, what's up? Math homework can be pretty time-consuming sometimes.|calm|calm|Action|chat|Player", "Player|Yeah, it's really taking up a lot of my time. I was wondering if you guys had any tips to make it go faster.|calm|calm|None|None", 'Tony|Well, as a teacher, my advice would be to break down the problem into smaller steps. It makes it easier to tackle and saves time in the long run.|calm|calm|Action|chat|Austin', "Austin|That's a great tip, Tony. Another thing that helps is to practice regularly. The more familiar you are with the concepts, the faster you'll be able to solve problems.|calm|calm|Action|chat|Tony", "Tony|Exactly, consistency is key. And don't forget to double-check your work before submitting it. It saves you from making careless mistakes or having to redo the whole thing.|calm|calm|None|None", "Austin|I couldn't agree more. And if you're feeling really stuck on a problem, don't hesitate to ask for help. Sometimes a fresh perspective can make all the difference.|calm|calm|None|None", "Tony|Absolutely. It's always a good idea to collaborate with classmates or seek guidance from your teacher.|calm|calm|Action|chat|Player", "Player|Thanks for the advice, guys. I'll definitely try implementing these strategies. Hopefully, it'll help me save some time and still get good grades.|calm|calm|None|None", "Tony|I'm sure it will, bro. Just keep practicing and stay organized.|calm|calm|None|None", 'Austin|Indeed, staying organized is crucial. Good luck with your math homework, and if you ever need any more tips, feel free to ask.|calm|calm|None|None', "Player|Thanks, I really appreciate it. I'll remember to reach out if I need any more help. Take care, guys.|calm|calm|None|None", 'Tony|You too, bro. Have a great day!|calm|calm|None|None', "Austin|You as well. Have a productive day, and don't forget to take breaks too.|calm|calm|None|None", 'Tony||calm|calm|Action|move|Park', '(Tony Exit. Remaining Characters : Player, Austin)', 'Austin||calm|calm|Action|move|Park', '(Austin Exit. Remaining Characters : Player)', '<EOC>']
    #prompt.prompt_for_re_creation('E',"I agree with you",memory)
    prompt.prompt_for_topic(names = ["小明","小张"], location = "公园", observations = "树木、草、湖泊、石头", language = 'C')